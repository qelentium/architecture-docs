###################################
Обзор архитектуры
###################################
Основные компоненты архитектуры представлены ниже:


.. figure :: ../img/architecture-overview.png
   : align: center
   : ширина: 1135
   : шкала: 50

   Рисунок - Архитектура RChain


Архитектура исполнения может опираться на некоторые внешние компоненты, зависящие от конкретной операционной системы, но они сохраняются в миниатюре, работая на JVM. Envirionment RouVM Execution работает на JVM, а затем отдельные экземпляры RhoVM запускаются в среде выполнения RhoVM.

Среда ** RhoVM Execution Environment предоставляет контекст для выполнения контракта, жизненного цикла отдельных экземпляров RhoVM.

Описывая оставшиеся слои, изображенные снизу вверх:

** P2P Communication ** поддерживает связь между узлами. Это будет  коммерческий класс TBD с открытым исходным кодом, такой как ZeroMQ или RabbitMQ.

** Хранение ** осуществляется через MongoDB, хранилище данных с ключевыми значениями. Первичная структура данных в памяти - это дерево оснований (trie).

** Уровень абстракции данных ** обеспечивает монолитный доступ к данным и другим узлам последовательно, как если бы они были локальными. Этот уровень представляет собой эволюцию технологии SpecialK (включая ее децентрализованную доставку контента, базу данных с ключом, обмен сообщениями между узлами и шаблоны доступа к данным). Этот уровень реализуется в Rholang, поэтому он использует RhoVM-EE и интерфейс ** для иносторонних функций Rholang ** для доступа к P2P Communication and Storage.

** Консенсус ** (Протокол проверки достоверности касперских доказательств / Консенсус-протокол) обеспечивает консенсус узлов в отношении состояния каждой цепочки.

Все узлы RChain включают в себя существенные ** Системные контракты **, которые написаны в Rholang. Системные процессы включают функции для запуска экземпляров RhoVM, балансировки нагрузки, управления контрактами dApp, токенами, доверием узлов и другими.

Контракты системы Token включают в себя то, что необходимо для запуска протоколов, которые взаимодействуют за пределами локального узла. Это * токены доступа к протоколу *. Существует двух типов PAT:
 * ** Токены ** - это то, что необходимо для достижения консенсуса, включая токен ** RChain Rev **. Дополнительные токены для подачи могут быть введены через официальные версии программного обеспечения. Для оплаты ресурсов узла * требуется токен статирования. ** Phlogiston ** является мерой  ресурсов RChain  (аналогично * gas * в Ethereum), и она многомерна и зависит от использования вычисления (в зависимости от инструкции), хранения (в зависимости от размера и продолжительности), и пропускной способности (качество обслуживания и пропускной способности). См. Также раздел «Механизм ограничения скорости».

 + ** Жетоны приложений ** являются необязательными и могут потребоваться для запуска определенных dApps. Новые токены приложений могут быть введены в любое время разработчиком dApp и похожи на маркеры ERCH20 от Ethereum.

** Rho API ** обеспечивает доступ к среде выполнения и узлу. ** Языковые привязки ** будут доступны для языков программирования, написанных против JVM, и, возможно, для других. Будет предоставлен инструмент разработки ** REPL ** (Read, Execute, Print и Loop). Каждый узел будет иметь интерфейс командной строки ** Command Line ** CLI. API ** Node API будет выставлять функции через http и json RPC.

Многозадачность против параллелизма
----------------------------------------
Очень важно, чтобы читатель понял последствия одновременного исполнения. Когда мы говорим «многозадачность», мы не имеем в виду одновременное выполнение нескольких процессов. Это параллелизм. * Многозадачность * - структурное свойство, которое позволяет независимым процессам составлять сложные процессы. Процессы считаются независимыми, если они не конкурируют за ресурсы.

Поскольку RChain совершил многозадачность в Rholang и RhoVM, мы увидим, что мы получим параллелизм и асинхронность как «свободные» возникающие свойства. Независимо от того, работает ли платформа на одном процессоре или 1 000 000 процессоров, дизайн RChain является масштабным. Сказав это, читатель этого документа заметит шаблоны проектирования параллельных вычислений.

###################################
Семантика узла и блокады
###################################
Следующая диаграмма классов UML изображает первичные концептуальные классы и структурные отношения.

.. figure :: ../img/RChainBlockchainStructuralSemantics.png
   : align: center
   : ширина: 90%

   Рисунок - Структурная семантика RChain Blockchain

